type: edu
custom_name: stage2
files:
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }
            return fields;
        }
    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput)
                    .setAttach(new Clue(x, y)));

                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            if (!reply.contains("Making move level \"easy\"")) {
                return new CheckResult(false,
                    "No \"Making move level \"easy\"\" line in output");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter cells: ");
            String stringFormat = scanner.nextLine();
            GameMap gameMap = new GameMap();
            gameMap.setGame(stringFormat);
            gameMap.showGame();
            int x = 5;
            int y = 5;

            boolean validAnswer = false;
            do {
                System.out.print("Enter the coordinates: ");
                String position = scanner.nextLine();
                try {
                    String[] arr = position.split("\\s+");
                    x = Integer.parseInt(arr[0]);
                    y = Integer.parseInt(arr[1]);

                } catch (NumberFormatException e) {
                    System.out.println("You should enter numbers!");
                    continue;
                } catch (ArrayIndexOutOfBoundsException e) {
                    System.out.println("You should enter 2 numbers!");
                    continue;
                }

                if ( x < 1 || x > 3 || y < 1 || y > 3) {
                    System.out.print("Coordinates should be from 1 to 3!\n");
                    continue;
                }

                if (gameMap.getField().isEmpty(x, y)) {
                    System.out.print("This cell is occupied! Choose another one!\n");
                    continue;
                }

                validAnswer = true;

            } while (!validAnswer);

            if (!gameMap.makeMoveXY(x, y)) {
                System.out.print("Error occupied when try to make move!");
                System.exit(1);
            }
            gameMap.showGame();
            System.out.println(gameMap.getStatus());
        }
    }
  learner_created: true
- name: src/tictactoe/GameMap.java
  visible: true
  text: |
    package tictactoe;

    import static tictactoe.Indicators.*;

    public class GameMap {
      private Game field;
      GameMap() {
        field = new Game("_________");
      }


      public void showGame() {
        Indicators[][] arr = field.toArray();
        System.out.print("---------\n");
        for (int i = 2; i > -1 ; i--) {
          System.out.print("| ");
          for (int j = 0; j < 3; j++) {
            System.out.print(arr[i][j] == EMPTY ? "  " : arr[i][j]+  " ");
          }
          System.out.print("|\n");
        }
        System.out.print("---------\n");
      }

      public void setGame(String stringFormat) {
        field = new Game(stringFormat);
      }

      public Game getField() {
        return field;
      }

      public boolean makeMoveXY(int x, int y) {
        if (field.isEmpty(x, y)) {
          return false;
        }
        Indicators indicators;
        GameStatus status = field.getGameStatus();
        switch (status) {
          case X_TURN:
            indicators = X;
            break;
          case O_TURN:
            indicators = O;
            break;
          default:
            return false;
        }

        field.setCell(x, y, indicators);
        return true;
      }

      public GameStatus getStatus() {
        return field.getGameStatus();
      }
    }
  learner_created: true
- name: src/tictactoe/Game.java
  visible: true
  text: |
    package tictactoe;
    import static tictactoe.Indicators.*;
    import static tictactoe.GameStatus.*;

    public class Game {
      short field;

      Game(String stringFormat){
        int counter = 0;
        short[][] f = new short[3][3];
        for (int i = 2; i >= 0; i--) {
          for (int j = 0; j < 3; j++) {
            f[i][j] = Indicators.getValue(stringFormat.charAt(counter));
            counter++;
          }
        }
        field = 0;

        for (int i = 2; i >= 0; i--) {
          for (int j = 2; j >= 0; j--) {
            field = (short)((field * 3) + f[i][j]);
          }
        }
      }

      public Indicators[][] toArray() {
        short f = this.field;
        Indicators[][] res = new Indicators[3][3];
        for (int i = 0; i < 3; i++) {
          for (int j = 0; j < 3; j++) {
            res[i][j] = Indicators.getCondition((short)(f % 3));
            f /= 3;
          }
        }
        return res;
      }
    /*
      public short getfiled() {
        return field;
      }*/
      public Indicators getCellInXY(int x, int y) {
        if ( x > 3 || x < 1 || y > 3 || y < 1) {
          System.exit(1); //todo change to Exception;
        }
        switch ((field / (short) Math.pow(3, (y - 1) * 3 + x - 1)) % 3) {
          case 1:
            return X;
          case 2:
            return O;
        }
        return EMPTY;
      }

      public boolean isEmpty(int x, int y) {
        return getCellInXY(x, y) != EMPTY;
      }

      private void setGame(Indicators[][] arr){
        field = 0;
        for (int i = 2; i >= 0; i--) {
          for (int j = 2; j >= 0; j--) {
            field = (short)((field * 3) + arr[i][j].getValue());
          }
        }
      }

      public void setCell(int x, int y, Indicators indicators) {
        if ( x > 3 || x < 1 || y > 3 || y < 1) {
          System.exit(1); //todo change to Exception;
        }

        Indicators[][] arr = toArray();
        arr[y-1][x-1] = indicators;
        setGame(arr);
      }

      public GameStatus getGameStatus() {
        Indicators[][] f= toArray();
        for (int i = 0; i < 3; i++) {
          if (f[0][i] == f[1][i] && f[1][i] == f[2][i] && f[0][i] != EMPTY) {
            if (f[0][i] == X) {
              return X_WIN;
            } else {
              return O_WIN;
            }
          }
          if (f[i][0] == f[i][1] && f[i][1] == f[i][2] && f[i][0] != EMPTY) {
            if (f[i][0] == X) {
              return X_WIN;
            } else {
              return O_WIN;
            }
          }
        }


        if (((f[1][1] == f[0][0] && f[1][1] == f[2][2])
            || (f[1][1] == f[0][2] && f[1][1] == f[2][0]))
            && f[1][1] != EMPTY) {
          if (f[1][1] == X) {
            return X_WIN;
          } else {
            return O_WIN;
          }
        }


        int xCount = 0;
        int oCount = 0;
        for (int i = 0; i < 3; i++) {
          for (int j = 0; j < 3; j++) {
            switch (f[i][j]) {
              case X:
                xCount++;
                break;
              case O:
                oCount++;
                break;
            }
          }
        }

        if (xCount + oCount == 9) {
          return DRAW;
        }

        if (xCount == oCount ) {
          return X_TURN;
        }

        return O_TURN;
      }
    }
  learner_created: true
- name: src/tictactoe/Indicators.java
  visible: true
  text: |
    package tictactoe;

    public enum Indicators {
      EMPTY('_', (short) 0),
      X('X', (short) 1),
      O('O', (short) 2);

      private char name;
      private short value;

      Indicators(char name, short value){
        this.value = value;
        this.name = name;
      }

      public short getValue() {
        return value;
      }

      public char getName() {
        return name;
      }

      public static short getValue(char name) {
        for (Indicators indicators : Indicators.values()) {
          if (indicators.getName() == name) {
            return indicators.getValue();
          }
        }
        return 0;
      }


      public static Indicators getCondition(short value) {
        for (Indicators indicators : Indicators.values()) {
          if (indicators.getValue() == value) {
            return indicators;
          }
        }
        return EMPTY;
      }

      @Override
      public String toString() {
        return String.valueOf(name);
      }
    }
  learner_created: true
- name: src/tictactoe/GameStatus.java
  visible: true
  text: |
    package tictactoe;

    public enum  GameStatus {
      X_TURN("Game not finished"),
      O_TURN("Game not finished"),
      DRAW("Draw"),
      X_WIN("X wins"),
      O_WIN("O wins ");

      private String name;

      GameStatus(String name) {
        this.name = name;
      }

      @Override
      public String toString() {
        return name;
      }
    }
  learner_created: true
- name: src/tictactoe/Coordinates.java
  visible: true
  learner_created: true
- name: src/tictactoe/TTRobot.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/448/implement
status: Solved
record: 2
